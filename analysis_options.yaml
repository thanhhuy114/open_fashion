# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

linter:
  rules:
    # these rules are documented on and in the same order as
    # the Dart Lint rules page to make maintenance easier
    # https://github.com/dart-lang/linter/blob/master/example/all.yaml
    always_declare_return_types: true
    always_put_control_body_on_new_line: true
    # always_put_required_named_parameters_first # we prefer having parameters in the same order as fields https://github.com/flutter/flutter/issues/10219
    always_require_non_null_named_parameters: true
    # always_specify_types
    # always_use_package_imports # we do this commonly
    annotate_overrides: true
    # avoid_annotating_with_dynamic # conflicts with always_specify_types
    avoid_bool_literals_in_conditional_expressions: true
    # avoid_catches_without_on_clauses # blocked on https://github.com/dart-lang/linter/issues/3023
    # avoid_catching_errors # blocked on https://github.com/dart-lang/linter/issues/3023
    # avoid_classes_with_only_static_members
    avoid_double_and_int_checks: true
    avoid_dynamic_calls: true
    avoid_empty_else: true
    avoid_equals_and_hash_code_on_mutable_classes: true
    avoid_escaping_inner_quotes: true
    avoid_field_initializers_in_const_classes: true
    # avoid_final_parameters # incompatible with prefer_final_parameters
    avoid_function_literals_in_foreach_calls: true
    avoid_implementing_value_types: true
    avoid_init_to_null: true
    avoid_js_rounded_ints: true
    avoid_multiple_declarations_per_line: true # seems to be a stylistic choice we don't subscribe to
    avoid_null_checks_in_equality_operators: true
    avoid_positional_boolean_parameters: true # would have been nice to enable this but by now there's too many places that break it
    avoid_print: true
    # avoid_private_typedef_functions # we prefer having typedef (discussion in https://github.com/flutter/flutter/pull/16356)
    avoid_redundant_argument_values: true
    avoid_relative_lib_imports: true
    avoid_renaming_method_parameters: true
    avoid_return_types_on_setters: true
    # avoid_returning_null # still violated by some pre-nnbd code that we haven't yet migrated
    avoid_returning_null_for_future: true
    avoid_returning_null_for_void: true
    # avoid_returning_this # there are enough valid reasons to return `this` that this lint ends up with too many false positives
    avoid_setters_without_getters: true
    avoid_shadowing_type_parameters: true
    avoid_single_cascade_in_expression_statements: true
    avoid_slow_async_io: true
    avoid_type_to_string: true
    avoid_types_as_parameter_names: true
    # avoid_types_on_closure_parameters # conflicts with always_specify_types
    avoid_unnecessary_containers: true
    avoid_unused_constructor_parameters: true
    avoid_void_async: true
    # avoid_web_libraries_in_flutter # we use web libraries in web-specific code, and our tests prevent us from using them elsewhere
    await_only_futures: true
    camel_case_extensions: true
    camel_case_types: true
    cancel_subscriptions: true
    # cascade_invocations # doesn't match the typical style of this repo
    cast_nullable_to_non_nullable: true
    # close_sinks # not reliable enough
    # comment_references # blocked on https://github.com/dart-lang/linter/issues/1142
    # conditional_uri_does_not_exist # not yet tested
    # constant_identifier_names # needs an opt-out https://github.com/dart-lang/linter/issues/204
    control_flow_in_finally: true
    curly_braces_in_flow_control_structures: true # not required by flutter style
    depend_on_referenced_packages: false
    deprecated_consistency: true
    discarded_futures: true
    # diagnostic_describe_all_properties # enabled only at the framework level (packages/flutter/lib)
    # directives_ordering
    # do_not_use_environment # there are appropriate times to use the environment, especially in our tests and build logic
    empty_catches: true
    empty_constructor_bodies: true
    empty_statements: true
    eol_at_end_of_file: true
    exhaustive_cases: true
    file_names: true
    flutter_style_todos: true
    hash_and_equals: true
    implementation_imports: true
    # invariant_booleans # too many false positives: https://github.com/dart-lang/linter/issues/811
    # join_return_with_assignment # not required by flutter style
    leading_newlines_in_multiline_strings: true
    library_names: true
    library_prefixes: true
    library_private_types_in_public_api: true
    lines_longer_than_80_chars: true # not required by flutter style
    collection_methods_unrelated_type: true
    # literal_only_boolean_expressions # too many false positives: https://github.com/dart-lang/linter/issues/453
    missing_whitespace_between_adjacent_strings: true
    no_adjacent_strings_in_list: true
    no_default_cases: true
    no_duplicate_case_values: true
    no_leading_underscores_for_local_identifiers: true
    no_logic_in_create_state: true
    # no_runtimeType_toString # ok in tests; we enable this only in packages/
    non_constant_identifier_names: true
    noop_primitive_operations: true
    null_check_on_nullable_type_parameter: true
    null_closures: true
    # omit_local_variable_types # opposite of always_specify_types
    # one_member_abstracts # too many false positives
    only_throw_errors: true # this does get disabled in a few places where we have legacy code that uses strings et al
    overridden_fields: true
    package_api_docs: true
    package_names: true
    package_prefixed_library_names: true
    # parameter_assignments # we do this commonly
    prefer_adjacent_string_concatenation: true
    prefer_asserts_in_initializer_lists: true
    # prefer_asserts_with_message # not required by flutter style
    prefer_collection_literals: true
    prefer_conditional_assignment: true
    prefer_const_constructors: true
    prefer_const_constructors_in_immutables: true
    prefer_const_declarations: true
    prefer_const_literals_to_create_immutables: true
    # prefer_constructors_over_static_methods # far too many false positives
    prefer_contains: true
    # prefer_double_quotes # opposite of prefer_single_quotes
    prefer_equal_for_default_values: true
    # prefer_expression_function_bodies # conflicts with https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#consider-using--for-short-functions-and-methods
    prefer_final_fields: true
    prefer_final_in_for_each: true
    prefer_final_locals: true
    prefer_final_parameters: true # we should enable this one day when it can be auto-fixed (https://github.com/dart-lang/linter/issues/3104), see also parameter_assignments
    prefer_for_elements_to_map_fromIterable: true
    prefer_foreach: true
    prefer_function_declarations_over_variables: true
    prefer_generic_function_type_aliases: true
    prefer_if_elements_to_conditional_expressions: true
    prefer_if_null_operators: true
    prefer_initializing_formals: true
    prefer_inlined_adds: true
    # prefer_int_literals # conflicts with https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#use-double-literals-for-double-constants
    prefer_interpolation_to_compose_strings: true
    prefer_is_empty: true
    prefer_is_not_empty: true
    prefer_is_not_operator: true
    prefer_iterable_whereType: true
    # prefer_mixin # Has false positives, see https://github.com/dart-lang/linter/issues/3018
    # prefer_null_aware_method_calls # "call()" is confusing to people new to the language since it's not documented anywhere
    prefer_null_aware_operators: true
    prefer_relative_imports: true
    prefer_single_quotes: true
    prefer_spread_collections: true
    prefer_typing_uninitialized_variables: true
    prefer_void_to_null: true
    provide_deprecation_message: true
    # public_member_api_docs # enabled on a case-by-case basis; see e.g. packages/analysis_options.yaml
    recursive_getters: true
    require_trailing_commas: true # blocked on https://github.com/dart-lang/sdk/issues/47441
    sized_box_for_whitespace: true
    sized_box_shrink_expand: true
    slash_for_doc_comments: true
    sort_child_properties_last: true
    sort_constructors_first: true
    # sort_pub_dependencies # prevents separating pinned transitive dependencies
    sort_unnamed_constructors_first: true
    test_types_in_equals: true
    throw_in_finally: true
    tighten_type_of_initializing_formals: true
    # type_annotate_public_apis # subset of always_specify_types
    type_init_formals: true
    # unawaited_futures # too many false positives, especially with the way AnimationController works
    unnecessary_await_in_return: true
    unnecessary_brace_in_string_interps: true
    unnecessary_const: true
    unnecessary_constructor_name: true
    # unnecessary_final # conflicts with prefer_final_locals
    unnecessary_getters_setters: true
    # unnecessary_lambdas # has false positives: https://github.com/dart-lang/linter/issues/498
    unnecessary_new: true
    unnecessary_null_aware_assignments: true
    unnecessary_null_checks: true
    unnecessary_null_in_if_null_operators: true
    unnecessary_nullable_for_final_variable_declarations: true
    unnecessary_overrides: true
    unnecessary_parenthesis: true
    unnecessary_raw_strings: true # what's "necessary" is a matter of opinion; consistency across strings can help readability more than this lint
    unnecessary_statements: true
    unnecessary_string_escapes: true
    unnecessary_string_interpolations: true
    unnecessary_this: true
    unrelated_type_equality_checks: true
    unnecessary_to_list_in_spreads: true
    unnecessary_null_aware_operator_on_extension_on_nullable: true
    unsafe_html: true
    use_build_context_synchronously: true
    # use_decorated_box # not yet tested
    use_full_hex_values_for_flutter_colors: true
    use_function_type_syntax_for_parameters: true
    # use_if_null_to_convert_nulls_to_bools # blocked on https://github.com/dart-lang/sdk/issues/47436
    use_is_even_rather_than_modulo: true
    use_key_in_widget_constructors: true
    use_late_for_private_fields_and_variables: true
    use_named_constants: true
    use_raw_strings: true
    use_rethrow_when_possible: true
    use_setters_to_change_properties: true
    # use_string_buffers # has false positives: https://github.com/dart-lang/sdk/issues/34182
    use_test_throws_matchers: true
    # use_to_and_as_if_applicable # has false positives, so we prefer to catch this by code-review
    valid_regexps: true
    void_checks: true